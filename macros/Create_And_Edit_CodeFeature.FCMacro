# -*- coding: utf-8 -*-

# Macro to demonstrate creating and editing a CodeFeature object
# from the cadquery-freecad-workbench.

import FreeCAD
import FreeCADGui

# It's assumed that the cadquery-freecad-workbench is installed and its
# modules are discoverable by FreeCAD's Python environment.
# If running this macro from outside FreeCAD in an environment where InitGui.py
# hasn't set up sys.path, you might need to adjust sys.path.
# However, when run as a FreeCAD macro, this should generally work if the workbench is loaded.
try:
    from CQGui import CodeFeature # Assuming CodeFeature.py is in CQGui
except ImportError as e:
    FreeCAD.Console.PrintError("Error importing CodeFeature: {}\n".format(e))
    FreeCAD.Console.PrintError("Please ensure the CadQuery workbench is correctly installed and its modules are in sys.path.\n")
    # Optionally, attempt to add the workbench path if known, e.g.
    # import sys
    # sys.path.append(FreeCAD.getUserAppDataDir() + "Mod/cadquery-freecad-workbench") # Example path
    # from CQGui import CodeFeature
    raise # Re-raise the exception if the import fails, to stop the macro.

def run_macro():
    """Main function to run the macro's operations."""
    
    doc = FreeCAD.activeDocument()
    if not doc:
        doc = FreeCAD.newDocument("CodeFeatureDemo")
        FreeCAD.Console.PrintMessage("Created new document: CodeFeatureDemo\n")
    else:
        FreeCAD.Console.PrintMessage("Using active document: {}\n".format(doc.Name))

    # 1. Create a new Code Feature
    FreeCAD.Console.PrintMessage("Creating a new Code Feature...\n")
    cf_sphere = CodeFeature.create_code_feature(doc, name="MyCQSphere")

    if not cf_sphere:
        FreeCAD.Console.PrintError("Failed to create Code Feature.\n")
        return

    FreeCAD.Console.PrintMessage("Code Feature '{}' created.\n".format(cf_sphere.Label))

    # 2. Set its properties for a CadQuery sphere
    FreeCAD.Console.PrintMessage("Configuring for a CadQuery sphere...\n")
    cf_sphere.CodeString = """
import cadquery as cq

# Create a sphere
radius = 5.0
result = cq.Workplane("XY").sphere(radius).val()
# Remember: the final shape must be assigned to the 'result' variable.
"""
    cf_sphere.CodeType = "CadQuery"
    cf_sphere.GeneratedObjectLabel = "Parametric Sphere (CQ)" # This will update the object's label in the tree

    # 3. Execute the Code Feature to generate the sphere
    FreeCAD.Console.PrintMessage("Executing Code Feature to generate sphere...\n")
    CodeFeature.execute_code_feature(cf_sphere)
    doc.recompute() # Ensure the document and views update
    FreeCAD.Console.PrintMessage("Sphere should now be visible.\n")

    # 4. Let's reconfigure the same feature to be a Build123D box
    FreeCAD.Console.PrintMessage("\nReconfiguring '{}' for a Build123D box...\n".format(cf_sphere.Label))
    
    # It's good practice to give it a new name if its fundamental geometry/purpose changes
    # For this demo, we'll reuse the object but change its label via GeneratedObjectLabel.
    
    cf_sphere.CodeString = """
from build123d import * # Common practice in build123d examples

# Create a box
length, width, height = 8, 6, 4
result = Box(length, width, height)
# Remember: the final shape must be assigned to the 'result' variable.
"""
    cf_sphere.CodeType = "Build123D"
    cf_sphere.GeneratedObjectLabel = "Parametric Box (b3d)"

    # 5. Execute again to transform it into a box
    FreeCAD.Console.PrintMessage("Executing Code Feature to generate box...\n")
    CodeFeature.execute_code_feature(cf_sphere)
    doc.recompute() # Ensure the document and views update
    FreeCAD.Console.PrintMessage("Object should now be a box.\n")

    FreeCAD.Console.PrintMessage("\nMacro finished.\n")

# Run the macro
if __name__ == "__main__":
    try:
        run_macro()
    except Exception as e:
        import traceback
        FreeCAD.Console.PrintError("Macro execution failed: \n{}".format(traceback.format_exc()))

