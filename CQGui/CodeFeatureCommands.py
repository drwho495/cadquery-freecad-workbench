import FreeCAD 
import os 
from .CodeFeature import ViewProviderCodeFeature, CodeFeatureProxy

def createCodeFeature(doc, name="CodeFeature"):
    if not doc:
        FreeCAD.Console.PrintError("No active document to add CodeFeature.\n")
        return None

    obj = doc.addObject("Part::FeaturePython", name)
    if not obj:
        FreeCAD.Console.PrintError(f"Failed to create Part::Feature with name {name}.\n")
        return None

    obj.addProperty("App::PropertyString", "MacroFilename", "CodeObject", "Filename of the .FCMacro (e.g., MyMacro.FCMacro).")
    obj.addProperty("App::PropertyPath", "MacroDir", "CodeObject", "Directory containing the macro file. Leave empty to use document's dir or user macro dir.")
    obj.addProperty("App::PropertyString", "GeneratedObjectLabel", "CodeObject", "Optional label for the object generated by the code.")

    obj.MacroFilename = ""
    try:
        defaultMacroUserPath = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Macro").GetString("MacroPath")
        obj.MacroDir = defaultMacroUserPath
    except Exception:
        obj.MacroDir = ""
    obj.GeneratedObjectLabel = name

    ViewProviderCodeFeature(obj.ViewObject)
    CodeFeatureProxy(obj)

    return obj

def registerCodeFeatureCommand():
    if not FreeCAD.GuiUp: # Guard at the top
        return

    from PySide import QtGui # Imports moved up
    import FreeCADGui

    class CreateCodeFeatureCommand:
        def GetResources(self):
            return {"MenuText": "Create Code Feature",
                    "ToolTip": "Creates a new feature driven by CadQuery/Build123D code."}

        def Activated(self):
            doc = FreeCAD.activeDocument()
            if not doc:
                doc = FreeCAD.newDocument("CodeFeatureDoc")
            
            featureName, nameOk = QtGui.QInputDialog.getText(FreeCADGui.getMainWindow(), 
                                                          "Create Code Feature", 
                                                          "Enter feature name:", 
                                                          QtGui.QLineEdit.Normal, 
                                                          "MyCodeObject")
            if not (nameOk and featureName):
                FreeCAD.Console.PrintMessage("Code Feature creation cancelled by user (no name provided).\n")
                return

            macroFilename, macroOk = QtGui.QInputDialog.getText(FreeCADGui.getMainWindow(),
                                                                "Set Macro File (Optional)",
                                                                "Enter a macro name (e.g., MyShape)\nLocated in your default macro directory:",
                                                                QtGui.QLineEdit.Normal,
                                                                "") # Default empty
            
            newFeature = createCodeFeature(doc, name=featureName)
            if not newFeature:
                FreeCAD.Console.PrintError(f"Failed to create Code Feature object named {featureName}.\n")
                return

            if macroOk and macroFilename:
                try:
                    defaultMacroDir = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Macro").GetString("MacroPath")

                    newFeature.MacroDir = defaultMacroDir
                    if not defaultMacroDir:
                        FreeCAD.Console.PrintWarning("Default macro directory not found or not set in preferences.\n")
                    else:
                        if not macroFilename.endswith(".FCMacro"):
                            macroFilename += ".FCMacro"

                            newFeature.MacroFilename = macroFilename

                except Exception as e:
                    FreeCAD.Console.PrintError(f"Error getting default macro path or setting MacroPath property: {e}\n")
            
            newFeature.Proxy.updateFeature(newFeature)

        def IsActive(self):
            return True
    
    FreeCADGui.addCommand('CQ_CreateCodeFeature', CreateCodeFeatureCommand())